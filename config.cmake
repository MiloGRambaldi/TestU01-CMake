# CMake build system for TestU01 
# config.cmake - configuration
# Copyright (C) 2014 James Hirschorn <James.Hirschorn@gmail.com>

include( CheckIncludeFile )
include( CheckIncludeFileCXX )
include( CheckCXXSourceCompiles )
include( CheckTypeSize )
include( TestBigEndian )
include( CheckFunctionExists )
include( CheckCSourceCompiles )
include( CheckSymbolExists )

#------------------------------------------------
# General info

# Name of package
set( PACKAGE "testu01" )
# Define to the address where bug reports for this package should be sent.
set( PACKAGE_BUGREPORT "lecuyer@iro.umontreal.ca" )
# Define to the full name of this package.
set( PACKAGE_NAME "TestU01" )
# Define to the version of this package.
set( PACKAGE_VERSION "${TestU01_VERSION_STRING}" )
# Define to the full name and version of this package.
set( PACKAGE_STRING "${PACKAGE_NAME} ${PACKAGE_VERSION}" )
# Define to the one symbol short name of this package.
set( PACKAGE_TARNAME "${PACKAGE}" )
# Define to the home page for this package.
set( PACKAGE_URL "http://www.iro.umontreal.ca/~simardr/testu01/tu01.html" )
# Define to the version of this package.
set( VERSION "${TestU01_VERSION_STRING}" )

#------------------------------------------------
# Check for existence of include files.

# equivalent to autoconf-2.13 macro of the same name
include( AC_HEADER_STDC )

check_include_file ( dlfcn.h HAVE_DLFCN_H )
check_include_file ( gmp.h HAVE_GMP_H )
check_include_file ( inttypes.h HAVE_INTTYPES_H )
check_include_file ( memory.h HAVE_MEMORY_H )
check_include_file ( stdint.h HAVE_STDINT_H )
check_include_file ( strings.h HAVE_STRINGS_H )
check_include_file ( sys/stat.h HAVE_SYS_STAT_H )
check_include_file ( sys/types.h HAVE_SYS_TYPES_H )
check_include_file ( sys/utsname.h HAVE_SYS_UTSNAME_H )
check_include_file ( unistd.h HAVE_UNISTD_H )
check_include_file ( windows.h HAVE_WINDOWS_H )

#------------------------------------------------
# Check for Mathematica installation.

include( FindMathematica )

#------------------------------------------------
# process user options

macro ( testu01_process_option option symbol )
  if ( ${option} )
    set ( ${symbol} "#define ${symbol}" )
  else ()
    set ( ${symbol} "#undef ${symbol}" )
  endif ()
endmacro ()

# Currently there are no user options.

#------------------------------------------------
# Determine the processor Endian type.

test_big_endian( WORDS_BIGENDIAN )

#------------------------------------------------
# Check for compiler type support.

check_type_size( "long long" LONG_LONG )
check_type_size( "uint32_t" UINT32_T )
check_type_size( "uint8_t" UINT8_T )
check_type_size( "size_t" SIZE_T )

#------------------------------------------------
# Check for math library.
if( NOT DEFINED LIBM )
  set( LIBM_MESSAGE "Looking for math library" )
  message( STATUS ${LIBM_MESSAGE} )
  find_library( LIBM m )
  if( LIBM )
    set( TestU01_LIBRARIES ${TestU01_LIBRARIES} ${LIBM} )
    message( STATUS ${LIBM_MESSAGE} " - found" )
  else( LIBM )
    mark_as_advanced( LIBM )
    message( STATUS ${LIBM_MESSAGE} " - not found" )
  endif( LIBM )
  unset( LIBM_MESSAGE )
endif( NOT DEFINED LIBM )

#------------------------------------------------
# Check for math functions.

set( CMAKE_REQUIRED_LIBRARIES ${TestU01_LIBRARIES} )
macro( check_math_function_exists symbol test_value variable )
  set( code "
#include \"math.h\"
#include \"tgmath.h\"

int main( int argc, char *argv[] )
{
  double a = ${symbol}(${test_value}); 
  return 0;
}
" )
  check_c_source_compiles( "${code}" ${variable} )
  unset( code )
endmacro()

check_math_function_exists( erf 0.0 HAVE_ERF )
check_math_function_exists( random "" HAVE_RANDOM )
check_math_function_exists( lgamma 0.0 HAVE_LGAMMA )
check_math_function_exists( log1p 0.0 HAVE_LOG1P )

#------------------------------------------------
# DONE - configure the files, creating config.h and gdefconf.h

set( CONFIG_H_CMAKE "${TestU01_INCLUDE_DIR}/config.h . Generated by CMmake from ${TestU01_INCLUDE_DIR}/config.h.cmake" )
set( GDEFCONF_H_CMAKE "${TestU01_INCLUDE_DIR}/gdefconf.h . Generated by CMmake from ${TestU01_INCLUDE_DIR}/gdefconf.h.cmake" )

configure_file( ${TestU01_INCLUDE_DIR}/config.h.cmake ${TestU01_INCLUDE_DIR}/config.h )
configure_file( ${TestU01_INCLUDE_DIR}/gdefconf.h.cmake ${TestU01_INCLUDE_DIR}/gdefconf.h )

add_definitions( -DHAVE_CONFIG_H -DHAVE_GDEFCONF_H ) # make visible to source files


